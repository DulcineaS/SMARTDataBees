//	============================================================================
//
//  .,-:::::   :::.    :::::::..   :::::::.      ...   :::.    :::.
//	,;;;'````'   ;;`;;   ;;;;``;;;;   ;;;'';;'  .;;;;;;;.`;;;;,  `;;;
//	[[[         ,[[ '[[,  [[[,/[[['   [[[__[[\.,[[     \[[,[[[[[. '[[
//	$$$        c$$$cc$$$c $$$$$$c     $$""""Y$$$$$,     $$$$$$ "Y$c$$
//	`88bo,__,o, 888   888,888b "88bo,_88o,,od8P"888,_ _,88P888    Y88
//	"YUMMMMMP"YMM   ""` MMMM   "W" ""YUMMMP"   "YMMMMMP" MMM     YM
//
//	============================================================================
//
//	This file is a part of the Carbon Framework.
//
//	Copyright (C) 2005 Mark (Code6) Belles 
//
//	This library is free software; you can redistribute it and/or
//	modify it under the terms of the GNU Lesser General Public
//	License as published by the Free Software Foundation; either
//	version 2.1 of the License, or (at your option) any later version.
//
//	This library is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//	Lesser General Public License for more details.
//
//	You should have received a copy of the GNU Lesser General Public
//	License along with this library; if not, write to the Free Software
//	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//	============================================================================

using System;
using System.Collections;
using System.Diagnostics;

namespace Carbon.MultiThreading
{
	/// <summary>
	/// Provides a strongly-typed queue of BackgroundThreadPoolJob instances.
	/// This class is thread safe.
	/// </summary>
	[DebuggerStepThrough]
	public sealed class BackgroundThreadPoolJobQueue : Queue 
	{	
		#region BackgroundThreadPoolJobAlreadyQueuedException
	
		/// <summary>
		/// Defines an exception that is generated by the BackgroundThreadPool class
		/// if a job is queue more than once.
		/// </summary>
		public sealed class BackgroundThreadPoolJobAlreadyQueuedException : ApplicationException
		{
			private readonly BackgroundThreadPoolJob _job;
		
			/// <summary>
			/// Initializes a new instance of the BackgroundThreadPoolJobAlreadyQueuedException class
			/// </summary>
			/// <param name="job">The job that is already queued</param>
			internal BackgroundThreadPoolJobAlreadyQueuedException(BackgroundThreadPoolJob job) : 
				base("The job is already queued. A job cannot be queued more than one time if the previous queued job is still waiting to be executed.")
			{
				_job = job;
			}

			/// <summary>
			/// Returns the job that is already queued
			/// </summary>
			public BackgroundThreadPoolJob Job
			{
				get
				{
					return _job;
				}
			}
		}
	
		#endregion

	    /// <summary>
		/// Adds a job to the queue
		/// </summary>
		/// <param name="job"></param>
		public void Enqueue(BackgroundThreadPoolJob job)
		{
			if (Contains(job))
				throw new BackgroundThreadPoolJobAlreadyQueuedException(job);

			lock (SyncRoot)
			{
				base.Enqueue(job);
			}
		}

		/// <summary>
		/// Removes the next job from the queue
		/// </summary>
		/// <returns></returns>
		public new BackgroundThreadPoolJob Dequeue()
		{
			lock (SyncRoot)
			{
				return base.Dequeue() as BackgroundThreadPoolJob;
			}
		}
		
		/// <summary>
		/// Returns the contents of the queue as an array of jobs
		/// </summary>
		/// <returns></returns>
		public new BackgroundThreadPoolJob[] ToArray()
		{
			lock (SyncRoot)
			{
				return base.ToArray() as BackgroundThreadPoolJob[];
			}
		}

		/// <summary>
		/// Determines if the job exists in the queue
		/// </summary>
		/// <param name="job"></param>
		/// <returns></returns>
		public bool Contains(BackgroundThreadPoolJob job)
		{
			lock (SyncRoot)
			{
				var it = GetEnumerator();
				while(it.MoveNext())
				{
					if (Equals(((BackgroundThreadPoolJob)it.Current).Id, job.Id))
					{
						return true;
					}
				}
				return false;
			}
		}	
	}
}
