//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace SDBees.Core.Connectivity.SDBeesLink.Service
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;

    using System.Runtime.Serialization;
    using System.ServiceModel;

    using SDBees.Core.Model;

    /// <summary>
    /// Registrieren und Deregistrieren und Synchronisieren von Dokumenten
    /// </summary>
    [ServiceContract(SessionMode = SessionMode.Required, CallbackContract = typeof(ISDBeesExternalPluginCallbackService))]
	public interface ISDBeesExternalPluginService 
	{
        #region Callback Connection Management
        /// Because of mechanism of callback supplied by WCF, we have to come up with ourself some application-level protocol or a 
        /// consistent parttern for managing the life cycle of the connection.
        /// The service can only call back to the client if the client-side channel is still open, which is typically achieved by
        /// not closing the proxy. Keeping the proxy open will also prevent the callback object from bien garbage-collected.

        /// You may always want to add the Connect() and Disconnect() pair on a sessionful service simply as feature, because it
        /// enables the client to decide when to start or stop receiving callbacks during the session

        [OperationContract(IsOneWay = false)]
        bool Connect(string name);

        /// If the services  maintains a reference on a callback endpoint and the client-side proxy is closed or the client application 
        /// itself is gone, when the service invokes the callback it will get an ObjectDisposedException from the service channel. 
        /// It is therefore preferable for the client to inform the service when it no longer wishes to receive callbacks or when the
        /// client application is shutting down. In NamedPipeBindingService, InstanceContextMode = PerSession, read comments written on
        /// NamedPipeBindingService to get more info.
        [OperationContract(IsOneWay = true)]
        void Disconnect(string name);
        #endregion

        #region UserManagement
        void Login(string username, string password);

        #endregion

        #region Project
        [OperationContract(IsOneWay = false)]
        SDBeesProjectId ProjectSelectExisting();

        [OperationContract(IsOneWay = false)]
        bool ProjectOpenExisting(SDBeesProjectId projectid);

        [OperationContract(IsOneWay = false)]
        SDBeesProjectId ProjectCreateNew();

        [OperationContract(IsOneWay = false)]
        bool ProjectOpen(string filenameDatabase, bool createIfNotFound);
        #endregion

        [OperationContract(IsOneWay = false)]
        SDBeesExternalDocument ExternalDocumentGet(string LocalDocumentId);

        [OperationContract(IsOneWay = false)]
        SDBeesExternalDocument ExternalDocumentRegister(string LocalDocumentId, string pluginId, string roleId);

		[OperationContract(IsOneWay = true)]
        void ExternalDocumentUnregister(SDBeesDocumentId documentId);

        [OperationContract(IsOneWay = true)]
        void ExternalDocumentSynchronize(SDBeesExternalDocument doc, SDBeesSyncMode mode, SDBeesDataSet data, IntPtr windowHandle, bool blockApplication);

        [OperationContract(IsOneWay = true)]
        void CancelExternalDocumentSynchronize();

        #region Mappings
        [OperationContract(IsOneWay = false)]
        SDBeesExternalMappings MappingsGet(SDBeesPluginId pluginId, SDBeesPluginRoleId roleId, SDBeesDocumentId documentId);

        [OperationContract(IsOneWay = false)]
        void MappingsDefine(SDBeesExternalAvailableInfo pluginInfo, SDBeesPluginId pluginId, SDBeesPluginRoleId roleId);
        #endregion

        [OperationContract(IsOneWay = false)]
        SDBeesPluginRoleId RoleDefineNew(SDBeesExternalDocument doc);

        [OperationContract(IsOneWay = false)]
        SDBeesPluginRoleId RoleSelectCurrent();

        [OperationContract(IsOneWay = false)]
        void UpdateServerDialog();

        [OperationContract(IsOneWay = true)]
        void ReturnData(SDBeesDataSet data, int errno);

        [OperationContract(IsOneWay = false)]
        string GetData(string name, string explorerPluginDesriptor);
    }
}

